<?php/*+--------------------------------------------------------------------------|   Anwsion [#RELEASE_VERSION#]|   ========================================|   by Anwsion dev team|   (c) 2011 - 2012 Anwsion Software|   http://www.anwsion.com|   ========================================|   Support: zhengqiang@gmail.com|   +---------------------------------------------------------------------------*/if (!defined('IN_ANWSION')){	die;}class people_class extends AWS_MODEL{		// 更新个人首页计数	public function update_views($uid)	{		if (AWS_APP::cache()->get('update_views_people_' . md5(session_id()) . '_' . intval($question_id)))		{			return false;		}				AWS_APP::cache()->set('update_views_people_' . md5(session_id()) . '_' . intval($question_id), time(), get_setting('cache_level_normal'));				return $this->query('UPDATE ' . $this->get_table('users') . ' SET views_count = views_count + 1 WHERE uid = ' . intval($uid));	}		public function get_user_reputation_topic($uid, $user_reputation, $limit = 10)	{		$reputation_topics = $this->get_users_reputation_topic($uid, array(			$uid => $user_reputation		), $limit);				return $reputation_topics[$uid];	}		public function get_users_reputation_topic($uids, $users_reputation, $limit = 10)	{		if ($users_reputation_topics = $this->model('reputation')->get_reputation_topic($uids))		{			foreach ($users_reputation_topics as $key => $val)			{				if ($val['reputation'] < 1)				{					continue;				}								$reputation_topics[$val['uid']][] = $val;			}		}				if ($reputation_topics)		{			foreach ($reputation_topics AS $uid => $reputation_topic)			{				$reputation_topic = array_slice(aasort($reputation_topic, 'reputation', 'DESC'), 0, $limit);								foreach ($reputation_topic as $key => $val)				{					$topic_ids[$val['topic_id']] = $val['topic_id'];				}								foreach ($reputation_topic as $key => $val)				{					$reputation_topic[$key]['topic_title'] = $topics[$val['topic_id']]['topic_title'];					$reputation_topic[$key]['url_token'] = $topics[$val['topic_id']]['url_token'];				}								$reputation_topics[$uid] = $reputation_topic;			}						$topics = $this->model('topic')->get_topics_by_ids($topic_ids);						foreach ($reputation_topics as $uid => $reputation_topic)			{				foreach ($reputation_topic as $key => $val)				{					$reputation_topics[$uid][$key]['topic_title'] = $topics[$val['topic_id']]['topic_title'];					$reputation_topics[$uid][$key]['url_token'] = $topics[$val['topic_id']]['url_token'];				}			}		}				return $reputation_topics;	}		public function get_users_list_by_search($search_data = null)	{		$where = array();		$page = 0;		$per_page = 0;		$sort_key = 'uid';		$order = 'DESC';				if (is_array($search_data))		{			extract($search_data);		}				if ($user_name)		{			$where[] = "user_name LIKE '%" . $this->quote($user_name) . "%'";		}				if ($email)		{			$where[] = "email = '" . $this->quote($email) . "'";		}				if ($group_id)		{			$where[] = 'group_id = ' . intval($group_id);		}				if ($reg_date)		{			$reg_time = intval(strtotime($reg_date));						$where[] = 'reg_time BETWEEN ' . $reg_time . ' AND ' . ($reg_time + 86400);		}				if ($last_login_date)		{			$last_login_time = intval(strtotime($last_login_date));						$where[] = 'last_login BETWEEN ' . $last_login_time . ' AND ' . ($last_login_time + 86400);		}				if ($ip)		{			if (preg_match('/.*\.\\*$/i', $ip))			{				$ip_base = ip2long(str_replace('*', '0', $ip));				$where[] = 'last_ip BETWEEN ' . $ip_base . ' AND ' . ($ip_base + 255);			}			else			{				$where[] = 'last_ip = ' . ip2long($ip);			}		}				if ($integral_min || $integral_min == '0')		{			$where[] = 'integral >= ' . intval($integral_min);		}				if ($integral_max || $integral_max == '0')		{			$where[] = 'integral <= ' . intval($integral_max);		}				if ($reputation_min || $reputation_min == '0')		{			$where[] = 'reputation >= ' . intval($reputation_min);		}				if ($reputation_max || $reputation_max == '0')		{			$where[] = 'reputation <= ' . intval($reputation_max);		}				if ($job_id)		{			$where[] = 'job_id = ' . intval($job_id);		}				if ($province)		{			$where[] = "province = '" . $this->quote($province) . "'";		}				if ($city)		{			$where[] = "city = '" . $this->quote($city) . "'";		}				if ($birthday)		{			$birthday_time = intval(strtotime($birthday));						$where[] = 'last_login BETWEEN ' . $birthday_time . ' AND ' . ($birthday_time + 86400);		}						if ($user_list = $this->fetch_page('users', implode(' AND ', $where), $sort_key . ' ' . $order, $page, $per_page))		{			foreach($user_list as $key => $val)			{				if (!$val['url_token'])				{					$user_list[$key]['url_token'] = rawurlencode($val['user_name']);				}								if ($val['email_settings'])				{					$val['email_settings'] = unserialize($val['email_settings']);				}			}						return $user_list;		}	}}